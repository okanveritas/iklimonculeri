// app.js

// Trivia (Bilgi) veritabanÄ±
const TRIVIA = [
    "Biliyor muydunuz? GÄ±da taÅŸÄ±macÄ±lÄ±ÄŸÄ±, kÃ¼resel sera gazÄ± emisyonlarÄ±nÄ±n yaklaÅŸÄ±k %6'sÄ±nÄ± oluÅŸturur.",
    "Hava yoluyla taÅŸÄ±nan gÄ±dalar, deniz yoluyla taÅŸÄ±nanlara gÃ¶re 50 kat daha fazla COâ‚‚ Ã¼retebilir.",
    "Yerel ve mevsiminde Ã¼rÃ¼nler tÃ¼ketmek, gÄ±da kaynaklÄ± karbon ayak izinizi azaltmanÄ±n en etkili yollarÄ±ndan biridir.",
    "Ambalaj atÄ±klarÄ± da gÄ±danÄ±n Ã§evresel etkisine bÃ¼yÃ¼k katkÄ±da bulunur. MÃ¼mkÃ¼nse ambalajsÄ±z Ã¼rÃ¼nleri tercih edin."
];

// Ana uygulama fonksiyonu
document.addEventListener('DOMContentLoaded', async () => {
    // Global deÄŸiÅŸkenler
    let allProducts = [];
    let processedProducts = [];
    let settings = {};

    // 1. Veri YÃ¼kleme Fonksiyonu
    async function loadData() {
        try {
            const [settingsRes, productsRes] = await Promise.all([
                fetch('data/settings.json'),
                fetch('data/products.json')
            ]);
            
            if (!settingsRes.ok || !productsRes.ok) {
                throw new Error('Veri dosyalarÄ± yÃ¼klenemedi.');
            }

            settings = await settingsRes.json();
            allProducts = await productsRes.json();
            
            // TÃ¼m Ã¼rÃ¼nler iÃ§in emisyonlarÄ± hesapla
            processedProducts = allProducts.map(product => calculateEmissionData(product, settings));
            
            return true;

        } catch (error) {
            console.error('Veri yÃ¼kleme hatasÄ±:', error);
            return false;
        }
    }

    // 2. Emisyon Hesaplama Motoru
    function calculateEmissionData(product, settings) {
        let factor = 0;
        switch (product.transportType) {
            case 'air': factor = settings.factorAir; break;
            case 'ship': factor = settings.factorShip; break;
            case 'road': factor = settings.factorRoad; break;
            case 'train': factor = settings.factorTrain; break;
        }

        const carbonEmissionKg = product.distanceKm * factor * product.weightKg;
        
        // Green Score (0-100)
        // EÅŸik deÄŸer = 50 puan. EÅŸik deÄŸerin 2 katÄ± = 0 puan. 0 emisyon = 100 puan.
        const score = 100 - (carbonEmissionKg / (settings.emissionThresholdKg * 2)) * 100;
        const greenScore = Math.max(0, Math.min(100, Math.round(score)));
        
        const hasEcoLabel = carbonEmissionKg <= settings.emissionThresholdKg;
        const equivalencyKm = carbonEmissionKg / settings.carEquivalencyFactor;

        // EÄŸitimsel iÃ§erik Ã¼ret
        const educationalContent = generateEducationalContent(product, carbonEmissionKg, score);

        return {
            ...product, // Orijinal Ã¼rÃ¼n verilerini kopyala
            carbonEmissionKg,
            greenScore,
            hasEcoLabel,
            equivalencyKm,
            educationalContent
        };
    }

    // 3. (AI-Powered) EÄŸitimsel Ä°Ã§erik Ãœretici
    function generateEducationalContent(product, emission, score) {
        let impact, tips;
        const emissionFixed = emission.toFixed(2);
        
        if (score > 80) {
            impact = `Harika seÃ§im! ${product.originCountry} menÅŸeli bu ${product.name}, ${emissionFixed} kg COâ‚‚e ile Ã§ok dÃ¼ÅŸÃ¼k bir ayak izine sahip.`;
            tips = "Yerel ve mevsiminde Ã¼rÃ¼nleri tercih etmeye devam edin.";
        } else if (score > 50) {
            impact = `${product.originCountry} (${product.transportType} ile) gelen bu Ã¼rÃ¼n ${emissionFixed} kg COâ‚‚e ile orta dÃ¼zeyde bir ayak izine sahip.`;
            tips = "Deniz veya demir yoluyla taÅŸÄ±nan alternatifleri araÅŸtÄ±rmak ayak izinizi daha da azaltabilir.";
        } else {
            impact = `Dikkat! Ã–zellikle ${product.transportType} ile ${product.originCountry}'dan gelen bu Ã¼rÃ¼n, ${emissionFixed} kg COâ‚‚e ile yÃ¼ksek bir karbon ayak izine sahip.`;
            tips = "Bu Ã¼rÃ¼nÃ¼ tÃ¼ketirken daha yerel veya deniz yoluyla taÅŸÄ±nan alternatiflerini aramayÄ± dÃ¼ÅŸÃ¼nÃ¼n.";
        }

        return { impact, tips };
    }

    // 4. Ana Sayfa (index.html) MantÄ±ÄŸÄ±
    function renderProductList(filter = 'all', category = 'all') {
        const productListContainer = document.getElementById('product-list');
        if (!productListContainer) return; // YanlÄ±ÅŸ sayfadayÄ±z

        let filteredProducts = processedProducts;

        // Etiket filtresi
        if (filter === 'label') {
            filteredProducts = filteredProducts.filter(p => p.hasEcoLabel);
        } else if (filter === 'high-footprint') {
            filteredProducts = filteredProducts.filter(p => !p.hasEcoLabel);
        }
        
        // Kategori filtresi
        if (category !== 'all') {
            filteredProducts = filteredProducts.filter(p => p.category === category);
        }

        productListContainer.innerHTML = ''; // Listeyi temizle

        if (filteredProducts.length === 0) {
            productListContainer.innerHTML = '<p>Bu kriterlere uyan Ã¼rÃ¼n bulunamadÄ±.</p>';
            return;
        }

        filteredProducts.forEach(product => {
            const card = document.createElement('a');
            card.href = `product.html?id=${product.id}`;
            card.className = 'product-card';
            
            const scoreClass = product.greenScore > 80 ? 'score-100' : product.greenScore > 50 ? 'score-50' : 'score-0';
            const badge = product.hasEcoLabel 
                ? '<div class="badge green">Eco-Etiketli</div>'
                : '<div class="badge red">YÃ¼ksek Ayak Ä°zi</div>';

            card.innerHTML = `
                <div class="product-card-content">
                    <h3>${product.name}</h3>
                    <p>${product.originCountry} (${product.transportType})</p>
                </div>
                <div class="product-card-footer">
                    ${badge}
                    <div class="score ${scoreClass}">${product.greenScore}/100</div>
                </div>
            `;
            productListContainer.appendChild(card);
        });
    }
    
    // Ana sayfa kategori filtresini doldur
    function populateCategoryFilter() {
        const categoryFilter = document.getElementById('category-filter');
        if(!categoryFilter) return;
        
        const categories = [...new Set(allProducts.map(p => p.category))];
        categories.sort().forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            categoryFilter.appendChild(option);
        });
    }

    // 5. ÃœrÃ¼n Detay SayfasÄ± (product.html) MantÄ±ÄŸÄ±
    function renderProductDetail() {
        const detailContainer = document.getElementById('product-detail-content');
        if (!detailContainer) return; // YanlÄ±ÅŸ sayfadayÄ±z

        const urlParams = new URLSearchParams(window.location.search);
        const productId = parseInt(urlParams.get('id'));

        if (!productId) {
            detailContainer.innerHTML = '<p>ÃœrÃ¼n ID bulunamadÄ±. LÃ¼tfen ana sayfaya dÃ¶nÃ¼n.</p>';
            return;
        }

        const product = processedProducts.find(p => p.id === productId);

        if (!product) {
            detailContainer.innerHTML = '<p>ÃœrÃ¼n bulunamadÄ±.</p>';
            return;
        }

        // Sayfa baÅŸlÄ±ÄŸÄ±nÄ± gÃ¼ncelle
        document.title = `${product.name} - EcoLabelr`;

        const scoreClass = product.greenScore > 80 ? 'score-100' : product.greenScore > 50 ? 'score-50' : 'score-0';
        const badge = product.hasEcoLabel 
            ? '<div class="badge green">Eco-Etiketli</div>'
            : '<div class="badge red">YÃ¼ksek Ayak Ä°zi</div>';

        detailContainer.innerHTML = `
            <div class="product-info">
                <h2>${product.name}</h2>
                <p><strong>MenÅŸei:</strong> ${product.originCountry}</p>
                <p><strong>TaÅŸÄ±ma:</strong> ${product.transportType.charAt(0).toUpperCase() + product.transportType.slice(1)}</p>
                <p><strong>Mesafe:</strong> ${product.distanceKm} km</p>
                <p><strong>Kategori:</strong> ${product.category}</p>
            </div>

            <div class="emission-card">
                ${badge}
                <div class="score ${scoreClass}">
                    ${product.greenScore}<span style="font-size: 1.5rem; color: #666;">/100</span>
                </div>
                <div class="score-label">Green Score</div>
                
                <div class="emission-details">
                    <p><strong>Toplam Emisyon:</strong> ${product.carbonEmissionKg.toFixed(2)} kg COâ‚‚e (her ${product.weightKg}kg iÃ§in)</p>
                    
                    <div class="equivalency">
                        ðŸš— Bu, ortalama bir araba ile <strong>${product.equivalencyKm.toFixed(1)} km</strong> yol yapmaya eÅŸdeÄŸerdir.
                    </div>
                </div>
                
                <div class="educational-box">
                    <h4>Etki DeÄŸerlendirmesi</h4>
                    <p><strong>Etki:</strong> ${product.educationalContent.impact}</p>
                    <p><strong>Ä°pucu:</strong> ${product.educationalContent.tips}</p>
                </div>
            </div>
        `;

        // Alternatifleri yÃ¼kle
        renderAlternatives(product);
        
        // Trivia yÃ¼kle
        renderTrivia();
    }
    
    // (AI-Powered) Alternatif ÃœrÃ¼nleri YÃ¼kle
    function renderAlternatives(currentProduct) {
        const alternativesList = document.getElementById('alternatives-list');
        const alternativesSection = document.getElementById('alternatives-section');
        
        const alternatives = processedProducts
            .filter(p => 
                p.category === currentProduct.category && // AynÄ± kategori
                p.id !== currentProduct.id &&             // Kendisi deÄŸil
                p.greenScore > currentProduct.greenScore   // Daha iyi skora sahip
            )
            .sort((a, b) => b.greenScore - a.greenScore) // En iyiden sÄ±rala
            .slice(0, 3); // Ä°lk 3'Ã¼ al

        if (alternatives.length === 0) {
            alternativesSection.style.display = 'none';
            return;
        }

        alternativesList.innerHTML = '';
        alternatives.forEach(product => {
            const card = document.createElement('a');
            card.href = `product.html?id=${product.id}`;
            card.className = 'product-card';
            
            const scoreClass = 'score-100'; // Alternatifler her zaman daha iyi
            const badge = '<div class="badge green">Daha Ä°yi SeÃ§im</div>';

            card.innerHTML = `
                <div class="product-card-content">
                    <h3>${product.name}</h3>
                    <p>${product.originCountry} (${product.transportType})</p>
                </div>
                <div class="product-card-footer">
                    ${badge}
                    <div class="score ${scoreClass}">${product.greenScore}/100</div>
                </div>
            `;
            alternativesList.appendChild(card);
        });
    }

    // (AI-Powered) Trivia YÃ¼kle
    function renderTrivia() {
        const triviaText = document.getElementById('trivia-text');
        if(triviaText) {
            const randomIndex = Math.floor(Math.random() * TRIVIA.length);
            triviaText.textContent = TRIVIA[randomIndex];
        }
    }


    // 6. Sayfa YÃ¶nlendirme ve BaÅŸlatma
    const success = await loadData();
    if (success) {
        if (document.getElementById('product-list')) {
            // Ana SayfadayÄ±z
            populateCategoryFilter();
            renderProductList();
            
            // Filtre event listener'larÄ±
            let currentFilter = 'all';
            let currentCategory = 'all';
            
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    document.querySelector('.filter-btn.active').classList.remove('active');
                    btn.classList.add('active');
                    currentFilter = btn.dataset.filter;
                    renderProductList(currentFilter, currentCategory);
                });
            });
            
            document.getElementById('category-filter').addEventListener('change', (e) => {
                currentCategory = e.target.value;
                renderProductList(currentFilter, currentCategory);
            });
            
        } else if (document.getElementById('product-detail-content')) {
            // ÃœrÃ¼n Detay SayfasÄ±ndayÄ±z
            renderProductDetail();
        }
    } else {
        document.querySelector('main.container').innerHTML = '<h2>Hata</h2><p>Veriler yÃ¼klenirken bir sorun oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.</p>';
    }
});